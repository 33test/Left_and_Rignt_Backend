generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  categories_id      Int                  @id @default(autoincrement())
  category_name      String               @unique(map: "category_name_UNIQUE") @db.VarChar(50)
  category_type      String               @default("regular") @db.VarChar(50)
  parent_id          Int?
  product_categories product_categories[]
}

model product_categories {
  product_categories_id Int        @id @default(autoincrement())
  product_id            Int
  category_id           Int
  categories            categories @relation(fields: [category_id], references: [categories_id], onDelete: Cascade, map: "fk_product_categories_category_id")
  products              products   @relation(fields: [product_id], references: [product_id], onDelete: Cascade, map: "fk_product_categories_product_id")

  @@unique([product_id, category_id], map: "index_product_id_category_id")
  @@index([category_id], map: "fk_product_categories_category_id_idx")
  @@index([product_id], map: "fk_product_categories_product_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_images {
  product_images_id Int      @id @default(autoincrement())
  product_id        Int
  image_path        String   @db.VarChar(255)
  order_sort        Int      @default(1)
  alt_text          String?  @db.VarChar(255)
  image_type        String   @db.VarChar(20)
  products          products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_images_product_id")

  @@index([product_id], map: "fk_product_images_product_id_idx")
  @@index([order_sort, image_type], map: "idx_type_sort")
}

model product_specs {
  product_specs_id Int      @id @default(autoincrement())
  product_id       Int
  spec_value       String   @db.VarChar(50)
  stock            Int      @default(0) @db.UnsignedInt
  color_text       String?  @db.VarChar(50)
  color_square     String?  @db.VarChar(50)
  products         products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_spec_product_id")

  @@index([product_id], map: "fk_product_spec_product_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model products {
  product_id         Int                  @id @default(autoincrement())
  product_name       String               @db.VarChar(100)
  original_price     Decimal?             @db.Decimal(10, 2)
  sale_price         Decimal              @db.Decimal(10, 2)
  product_sku        String               @unique(map: "sku_UNIQUE") @db.VarChar(50)
  total_sales        Int                  @default(0)
  status             Int                  @default(1) @db.TinyInt
  listed_at          DateTime             @default(now()) @db.Timestamp(0)
  description        String?              @db.Text
  created_at         DateTime             @default(now()) @db.Timestamp(0)
  product_categories product_categories[]
  product_images     product_images[]
  product_specs      product_specs[]
  wishlists          wishlists[]

  @@index([status], map: "idx_status")
}

model deliver {
  id                 Int                  @id
  phone              String?              @db.VarChar(20)
  recepient          String               @db.VarChar(50)
  recepient_phone    String               @db.VarChar(20)
  country            String               @db.VarChar(100)
  city               String               @db.VarChar(100)
  region             String               @db.VarChar(100)
  address            String               @db.Text
  owner              String               @db.VarChar(50)
  users              users                @relation(fields: [owner], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_deliver_owner_userId")
  orders_imformation orders_imformation[]

  @@index([owner], map: "fk_owner_userId_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model discount {
  discount_id String  @db.VarChar(50)
  dicription  String? @db.Text

  @@ignore
}

model orders_imformation {
  orders_id            BigInt                           @id @db.UnsignedBigInt
  orders_users_id      String?                          @db.VarChar(50)
  orders_status        orders_imformation_orders_status
  orders_created_date  DateTime                         @db.DateTime(0)
  orders_finished_date DateTime?                        @db.DateTime(0)
  orders_deliver_id    Int?
  orders_payment_id    Int?
  deliver              deliver?                         @relation(fields: [orders_deliver_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_deliver")
  credit_card          credit_card?                     @relation(fields: [orders_payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_payment")
  users                users?                           @relation(fields: [orders_users_id], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_user")

  @@index([orders_deliver_id], map: "fk_orders_deliver_idx")
  @@index([orders_users_id], map: "fk_orders_user_idx")
  @@index([orders_payment_id], map: "fk_orders_payment_idx")
}

model reviews_table {
  product_id   Int     @id @unique(map: "commentId_UNIQUE") @default(autoincrement())
  user_id      String  @unique(map: "userId_UNIQUE") @db.VarChar(255)
  sku          Int?
  comment      String? @db.Text
  comment_time Int?
}

model users {
  id                 Int                  @id @unique(map: "id_UNIQUE") @default(autoincrement())
  userId             String               @unique(map: "userId_UNIQUE") @db.VarChar(50)
  username           String               @db.VarChar(50)
  email              String?              @unique(map: "email_UNIQUE") @db.VarChar(255)
  phone              String?              @unique(map: "phone_UNIQUE") @db.VarChar(20)
  gender             String               @db.VarChar(1)
  birthday           DateTime?            @db.Date
  mobile_phone       String?              @db.VarChar(20)
  from_store         String?              @db.VarChar(45)
  introduced_by      String?              @db.VarChar(50)
  password_hash      String?              @db.VarChar(255)
  line_id            String?              @db.VarChar(100)
  google_id          String?              @db.VarChar(100)
  credit_card        credit_card[]
  deliver            deliver[]
  orders_imformation orders_imformation[]
  shared_cart_users  shared_cart_users[]
  wishlists          wishlists[]

  @@index([userId], map: "user_id")
}

model cart {
  user_id    String @db.VarChar(50)
  product_id String @db.VarChar(50)
  quantity   Int?

  @@ignore
}

model wishlists {
  id                    Int      @id @default(autoincrement())
  wishlists_members_id  String   @db.VarChar(50)
  wishlists_products_id Int
  products              products @relation(fields: [wishlists_products_id], references: [product_id], onDelete: Cascade, map: "fk_wishlists_products")
  users                 users    @relation(fields: [wishlists_members_id], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_wishlists_users")

  @@index([wishlists_products_id], map: "fk_wishlists_products")
  @@index([wishlists_members_id], map: "fk_wishlists_users_idx")
}

model credit_card {
  id                 Int                  @id
  card_number        String               @db.VarChar(16)
  owner_name         String               @db.VarChar(50)
  expiration_date    String               @db.VarChar(6)
  security_code      String               @db.VarChar(3)
  owner              String               @db.VarChar(50)
  users              users                @relation(fields: [owner], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_creditCard_owner_userId")
  orders_imformation orders_imformation[]

  @@index([owner], map: "userId_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model customer_info {
  cuID    String? @db.VarChar(50)
  cuName  String? @db.VarChar(50)
  cuPhone Int?
  gender  String? @db.VarChar(1)
  UserID  String? @db.VarChar(50)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model deliver_pro_info {
  acName     String? @db.VarChar(50)
  acPhone    Int?
  addr       String? @db.VarChar(50)
  city       String? @db.VarChar(10)
  postalCode Int?
  site       String? @db.VarChar(50)
  userID     String? @db.VarChar(50)
  delivrID   String? @db.VarChar(50)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model pay_info_table {
  cardID       String?   @db.VarChar(50)
  cardName     String?   @db.VarChar(50)
  efficentDate DateTime? @db.Date
  securityCode Int?
  PayID        String?   @db.VarChar(50)

  @@ignore
}

model purchase_order {
  purchaseID   String  @id @db.VarChar(50)
  DeliveryWay  String? @db.VarChar(50)
  DeliverySite String? @db.VarChar(50)
  payWay       String? @db.VarChar(50)
  note         String? @db.VarChar(50)
  payID        String? @db.VarChar(50)
  cuID         String? @db.VarChar(50)
  DeliverID    String? @db.VarChar(50)
  puID         String? @db.VarChar(50)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model purchase_product {
  pu_id      String? @db.VarChar(50)
  user_id    String? @db.VarChar(50)
  product_id String? @db.VarChar(50)
  quantity   Int?

  @@ignore
}

model shared_cart_users {
  id                   Int      @id @default(autoincrement()) @db.UnsignedInt
  shared_cart_group_id String   @db.VarChar(100)
  user_id              String   @db.VarChar(50)
  created_at           DateTime @default(now()) @db.Timestamp(0)
  is_deleted           Boolean  @default(false)
  users                users    @relation(fields: [user_id], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_shared_cart_user_id")

  @@index([shared_cart_group_id], map: "fk_shared_cart_id_idx")
  @@index([user_id], map: "fk_shared_cart_user_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model shared_carts {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  group_id     String    @db.VarChar(100)
  name         String?   @db.VarChar(45)
  product_id   Int?
  quantity     Int?
  created_at   DateTime  @default(now()) @db.Timestamp(0)
  updated_at   DateTime  @default(now()) @db.Timestamp(0)
  status       Boolean   @default(false)
  completed_at DateTime? @db.Timestamp(0)
  completed_by String?   @db.VarChar(50)
  is_deleted   Boolean   @default(false)

  @@index([group_id], map: "idx_group_id")
}

enum orders_imformation_orders_status {
  Pending
  Completed
  Cancelled
}
